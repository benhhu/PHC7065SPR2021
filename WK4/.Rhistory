dbSendQuery(con,q2)
dbSendQuery(con,q3)
#c. check the tables
q<-"SELECT * FROM Subject;"
dbGetQuery(con,q)
q<-"SELECT * FROM County;"
dbGetQuery(con,q)
q<-"SELECT * FROM State;"
dbGetQuery(con,q)
q<-"
SELECT Subject.name, State.name as state_name, State.policy
FROM Subject
JOIN State ON Subject.state_id=State.id
;
"
dbGetQuery(con,q)
#d. JOIN
q<-"
SELECT Subject.name as ind_name, State.name as state_name, State.policy
FROM Subject
JOIN State ON Subject.state_id=State.id
;
"
dbGetQuery(con,q)
q<-"
SELECT Subject.name, State.name as state_name, County.income
FROM Subject
JOIN State
JOIN County
ON Subject.state_id=State.id
AND Subject.state_id=County.state_id
AND Subject.county_id=County.id
;
"
dbGetQuery(con,q)
q<-"
SELECT COUNT(id) as n
FROM Subject
;
"
dbGetQuery(con,q)
q<-"
SELECT COUNT(name) as n
FROM Subject
;
"
dbGetQuery(con,q)
q<-"
SELECT COUNT(id) as n, state_id
FROM Subject
GROUP BY state_id
;
"
dbGetQuery(con,q)
q<-"
SELECT COUNT(DISTINCT state_id) as nState
FROM Subject
;
"
dbGetQuery(con,q)
q<-"
SELECT MAX(income) as maxIncome, state_id
FROM County
GROUP BY state_id
HAVING MAX(income)>90000
;
"
dbGetQuery(con,q)
q<-"
SELECT MAX(income) as maxIncome, state_id
FROM County
GROUP BY state_id
WHERE MAX(income)>90000
;
"
dbGetQuery(con,q)
q<-"
SELECT MAX(income) as maxIncome, state_id
FROM County
GROUP BY state_id
WHERE maxIncome>90000
;
"
dbGetQuery(con,q)
q<-"
SELECT MAX(income) as maxIncome, state_id
FROM County
GROUP BY state_id
HAVING MAX(income)>90000
;
"
dbGetQuery(con,q)
q<-"
SELECT name,
gender,
CASE WHEN age BETWEEN 1 AND 4 THEN 1
WHEN age BETWEEN 5 AND 8 THEN 2
WHEN age > 8 THEN 3
ELSE NULL
END AS recodeAge
FROM Subject
;
"
dbGetQuery(con,q)
q<-"
SELECT name,
gender,
age,
CASE WHEN age BETWEEN 1 AND 4 THEN 1
WHEN age BETWEEN 5 AND 8 THEN 2
WHEN age > 8 THEN 3
ELSE NULL
END AS recodeAge
FROM Subject
;
"
dbGetQuery(con,q)
#a. import the 2015 family file and household file (https://www.cdc.gov/nchs/nhis/nhis_2015_data_release.htm)
family<-read.csv('dat/familyxx.csv',header = T,stringsAsFactors = F)
household<-read.csv('dat/househld.csv',header = T,stringsAsFactors = F)
head(family)
head(household)
pw <- "SPR19mysql!"
drv<-dbDriver("MySQL")
con<-dbConnect(drv,dbname="PHC7065",host="localhost",user="spr19",password=pw)
#export
dbWriteTable(con,"Family",family)
#export
dbWriteTable(con,"Family",family,overwrite=T)
dbWriteTable(con,"Household",household,overwrite=T)
#check the exported tables
q<-"
SELECT *
FROM Family
LIMIT 10
;
"
dbGetQuery(con,q)
options(max.print = 1000000)
dbGetQuery(con,q)
q<-"
SELECT *
FROM Household
LIMIT 10
;
"
dbGetQuery(con,q)
#get a frequency table: number of interviews conducted by quarter
q<-"
SELECT INTV_QRT, COUNT(INTV_QRT) AS N_INTV
FROM Household
GROUP BY INTV_QRT
;
"
dbGetQuery(con,q)
#what's the maximum number of families within a household?
q1<-"
DROP TABLE IF EXISTS Temp;
"
q2<-"
CREATE TABLE Temp(
SELECT COUNT(FMX) AS N_FAM
FROM Family
GROUP BY HHX
)
;
"
dbSendQuery(con,q1)
dbSendQuery(con,q2)
q<-"SELECT * FROM Temp LIMIT 5;"
dbGetQuery(con,q)
q2<-"
CREATE TABLE Temp(
SELECT COUNT(FMX) AS N_FAM,HHX
FROM Family
GROUP BY HHX
)
;
"
dbSendQuery(con,q1)
dbSendQuery(con,q2)
q<-"SELECT * FROM Temp LIMIT 5;"
dbGetQuery(con,q)
q3<-"
SELECT MAX(N_FAM) AS MAX_N_FAM
FROM Temp
;
"
dbGetQuery(con,q3)
q1<-"
DROP TABLE IF EXISTS Temp2;
"
q2<-"
CREATE TABLE Temp2(
SELECT HHX,FMX,
CASE WHEN FM_EDUC1 BETWEEN 97 AND 99 THEN NULL
ELSE FM_EDUC1
END AS recodeFM_EDUC1
FROM Family)
;
"
q2<-"
CREATE TABLE Temp2(
SELECT HHX,FMX,
CASE WHEN FM_EDUC1 BETWEEN 97 AND 99 THEN NULL
ELSE FM_EDUC1
END AS recodeFM_EDUC1
FROM Family)
;
"
dbSendQuery(con,q1)
dbSendQuery(con,q2)
q<-"SELECT * FROM Temp2 LIMIT 5;"
dbGetQuery(con,q)
q3<-"
DROP TABLE IF EXISTS Temp3;
"
q4<-"
CREATE TABLE Temp3(
SELECT MAX(recodeFM_EDUC1) AS MaxEDUC, HHX
FROM Temp2
GROUP BY Temp2.HHX)
;
"
dbSendQuery(con,q3)
dbSendQuery(con,q4)
q<-"SELECT * FROM Temp3 LIMIT 5;"
dbGetQuery(con,q)
q5<-"
SELECT Temp3.HHX,Temp3.MaxEDUC,Household.LIVQRT
FROM Temp3
LEFT JOIN Household ON Temp3.HHX=Household.HHX
LIMIT 10
;
"
dbGetQuery(con,q5)
knitr::opts_knit$set(root.dir="/home/vmuser/Desktop/PHC7065SPR2020/WK4")
#load the package that will allow us to connect to mysql
library(RMySQL)
#setwd
setwd("/home/vmuser/Desktop/PHC7065SPR2020/WK4")
#password
pw <- "vmuser!"
#password
pw <- "vmuser"
#load the mysql driver
drv<-dbDriver("MySQL")
#create a connection to the mysql database
con<-dbConnect(drv,dbname="PHC7065DB",host="localhost",user="phc7065",password=pw)
#first table to store individual-level data
q1<-"
DROP TABLE IF EXISTS Subject;
"
#execute the queries
dbSendQuery(con,q1)
#first table to store individual-level data
q1<-"
DROP TABLE IF EXISTS Subject;
"
q2<-"
CREATE TABLE Subject(
id INT NOT NULL AUTO_INCREMENT,
name VARCHAR(20) NOT NULL,
gender INT NOT NULL,
age INT NOT NULL,
race INT NOT NULL,
county_id INT NOT NULL,
state_id INT NOT NULL,
PRIMARY KEY (id)
)
;"
#second table to store county-level data
q3<-"
DROP TABLE IF EXISTS County;
"
q4<-"
CREATE TABLE County(
id INT NOT NULL,
state_id INT NOT NULL,
name VARCHAR(20) NOT NULL,
income INT NOT NULL,
PRIMARY KEY (id,state_id)
);
"
#third table to store state-level data
q5<-"
DROP TABLE IF EXISTS State;
"
q6<-"
CREATE TABLE State(
id INT NOT NULL AUTO_INCREMENT,
name VARCHAR(20) NOT NULL,
policy INT NOT NULL,
date DATE,
PRIMARY KEY (id)
);
"
#execute the queries
dbSendQuery(con,q1)
dbSendQuery(con,q2)
dbSendQuery(con,q3)
dbSendQuery(con,q4)
dbSendQuery(con,q5)
dbSendQuery(con,q6)
#b. Insert some data
q1<-"
INSERT INTO Subject(name,gender,age,race,county_id,state_id)
VALUES  ('John',1,5,1,1,1),
('Mary',0,7,2,2,1),
('Mike',1,6,3,1,2),
('Linda',0,5,1,2,2),
('Lucas',1,4,1,1,3),
('Aiden',1,10,4,2,3);
"
q2<-"
INSERT INTO County(id,state_id,name,income)
VALUES  (1,1,'Alachua',78987),
(2,1,'Orange',87689),
(1,2,'Newton',56765),
(2,2,'Burke',67890),
(1,3,'Glenn',98678),
(2,3,'Kings',87908);
"
q3<-"
INSERT INTO State(name,policy,date)
VALUES  ('Florida',1,'2002-11-23'),
('Georgia',0,NULL),
('California',1,'2004-12-23');
"
#execute the queries
dbSendQuery(con,q1)
dbSendQuery(con,q2)
dbSendQuery(con,q3)
#c. check the tables
q<-"SELECT * FROM Subject;"
dbGetQuery(con,q)
q<-"SELECT * FROM County;"
dbGetQuery(con,q)
q<-"SELECT * FROM State;"
dbGetQuery(con,q)
#d. JOIN
q<-"
SELECT Subject.name, State.name as state_name, State.policy
FROM Subject
JOIN State ON Subject.state_id=State.id
;
"
dbGetQuery(con,q)
q<-"
SELECT Subject.name, State.name as state_name, County.income
FROM Subject
JOIN State
JOIN County
ON Subject.state_id=State.id
AND Subject.state_id=County.state_id
AND Subject.county_id=County.id
;
"
dbGetQuery(con,q)
#e. Aggregate function
q<-"
SELECT COUNT(id) as n
FROM Subject
;
"
dbGetQuery(con,q)
q<-"
SELECT COUNT(id) as n, state_id
FROM Subject
GROUP BY state_id
;
"
dbGetQuery(con,q)
#f. DISTINCT
q<-"
SELECT COUNT(DISTINCT state_id) as nState
FROM Subject
;
"
dbGetQuery(con,q)
#g. HAVING
q<-"
SELECT MAX(income) as maxIncome, state_id
FROM County
GROUP BY state_id
HAVING MAX(income)>90000
;
"
dbGetQuery(con,q)
#h. CASE
q<-"
SELECT name,
gender,
CASE WHEN age BETWEEN 1 AND 4 THEN 1
WHEN age BETWEEN 5 AND 8 THEN 2
WHEN age > 8 THEN 3
ELSE NULL
END AS recodeAge
FROM Subject
;
"
dbGetQuery(con,q)
#a. import the 2015 family file and household file (https://www.cdc.gov/nchs/nhis/nhis_2015_data_release.htm)
family<-read.csv('dat/familyxx.csv',header = T,stringsAsFactors = F)
household<-read.csv('dat/househld.csv',header = T,stringsAsFactors = F)
head(family)
head(household)
#create a connection to the mysql database
pw <- "SPR19mysql!"
#create a connection to the mysql database
pw <- "vmuser"
drv<-dbDriver("MySQL")
con<-dbConnect(drv,dbname="PHC7065DB",host="localhost",user="phc7065",password=pw)
#export
dbWriteTable(con,"Family",family,overwrite=T)
dbWriteTable(con,"Household",household,overwrite=T)
#check the exported tables
q<-"
SELECT *
FROM Family
LIMIT 10
;
"
dbGetQuery(con,q)
q<-"
SELECT *
FROM Household
LIMIT 10
;
"
dbGetQuery(con,q)
#export
dbWriteTable(con,"Family",family,overwrite=T,row.names=F)
dbWriteTable(con,"Household",household,overwrite=T,row.names=F)
#check the exported tables
q<-"
SELECT *
FROM Family
LIMIT 10
;
"
dbGetQuery(con,q)
q<-"
SELECT *
FROM Household
LIMIT 10
;
"
dbGetQuery(con,q)
#get a frequency table: number of interviews conducted by quarter
q<-"
SELECT INTV_QRT, COUNT(INTV_QRT) AS N_INTV
FROM Household
GROUP BY INTV_QRT
;
"
dbGetQuery(con,q)
#what's the maximum number of families within a household?
q1<-"
DROP TABLE IF EXISTS Temp;
"
q2<-"
CREATE TABLE Temp(
SELECT COUNT(FMX) AS MAX_N_FAM
FROM Family
GROUP BY HHX
)
;
"
q3<-"
SELECT MAX(MAX_N_FAM)
FROM Temp
;
"
dbSendQuery(con,q1)
dbSendQuery(con,q2)
dbGetQuery(con,q3)
#get 1) the highest education level (Family.FM_EDUC1) within a household, and 2) the housing type (Household.LIVQRT) for each household
q1<-"
DROP TABLE IF EXISTS Temp2;
"
q2<-"
CREATE TABLE Temp2(
SELECT HHX,FMX,
CASE WHEN FM_EDUC1 BETWEEN 97 AND 99 THEN NULL
ELSE FM_EDUC1
END AS recodeFM_EDUC1
FROM Family)
;
"
q3<-"
DROP TABLE IF EXISTS Temp3;
"
q4<-"
CREATE TABLE Temp3(
SELECT MAX(recodeFM_EDUC1) AS MaxEDUC, HHX
FROM Temp2
GROUP BY Temp2.HHX)
;
"
q5<-"
SELECT Temp3.HHX,Temp3.MaxEDUC,Household.LIVQRT
FROM Temp3
LEFT JOIN Household ON Temp3.HHX=Household.HHX
LIMIT 10
;
"
dbSendQuery(con,q1)
dbSendQuery(con,q2)
dbSendQuery(con,q3)
dbSendQuery(con,q4)
dbGetQuery(con,q5)
